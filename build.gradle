plugins{
	id 'java'
	id 'jacoco'
	id 'eclipse'
	id 'application'
	id 'base'
}

import org.apache.tools.ant.filters.ReplaceTokens

mainClassName = 'org.jreliability.tester.ReliabilityTester'
group = 'org.jreliability'

/*
 * define global parameters here, e.g. versions numbers of tools which need to be consistent for all subprojects
 * they are all accesible via project.parametername e.g. project.opt4jJavaVersion to get the used java version for Opt4J
 */
ext{
	jreliabilityJavaVersion = "21"
	junitVersion = "5.10.2"
	mockitoVersion = "5.10.0"
	jacocoVersion = "0.8.11"
}

jacoco{
	toolVersion = project.jacocoVersion
}


java {
	withJavadocJar()
	withSourcesJar()
	sourceCompatibility = project.jreliabilityJavaVersion
	targetCompatibility = project.jreliabilityJavaVersion
    toolchain {
    	languageVersion.set(JavaLanguageVersion.of(project.jreliabilityJavaVersion))
    }
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = {
	->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'describe', '--tags'
		standardOutput = stdout
		ignoreExitValue true
	}
	version=stdout.toString().trim()
	if (version.indexOf('-') >= 0 || version.isEmpty())
		version += '-SNAPSHOT'
	return version
}
version=getVersionName()


ext {
	dateISO = new Date().format("yyyy-MM-dd")
}

repositories {
    mavenCentral()
}

dependencies {
	implementation group: 'net.sourceforge.collections', name: 'collections-generic', version: '4.01'
	implementation group: 'com.github.com-github-javabdd', name: 'com.github.javabdd', version: '9.0.0'
	implementation files('lib/ptolemyplot-5.7.jar')
    
    testImplementation platform(group: 'org.junit', name: 'junit-bom', version: project.junitVersion)
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter'
	testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher'
	testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: project.mockitoVersion
}

jar {
	manifest {
		attributes 'Main-Class': mainClassName
	}
}

/* for now ignore all javadoc errors in case of Java 8 */
if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}

test {
    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
	}
}

jacocoTestCoverageVerification {
	dependsOn check
}

jacocoTestReport {
	dependsOn jacocoTestCoverageVerification

	reports {
		html.required = true
		html.destination(file("${buildDir}/reports/jacoco"))
		xml.required = true
		xml.destination(file("${buildDir}/reports/jacoco/report.xml"))
		csv.required = true
		csv.destination(file("${buildDir}/reports/jacoco/report.csv"))
	}
	
	onlyIf = {
		true
	}

    afterEvaluate {
    	getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'org/jreliability/gui/**',
				'org/jreliability/tutorial/**',
				'org/jreliability/tester/**'
				])
		})
    }
}

artifacts {
	archives sourcesJar
    archives javadocJar
}

task alldocs(type: Javadoc, dependsOn: javadoc) {
	title = "JReliability version $version Project API Documentation"
	destinationDir = new File(project.buildDir, 'docs/javadoc')
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PUBLIC
	options.links "https://docs.oracle.com/en/java/javase/${jreliabilityJavaVersion}/docs/api/"
	options.linkSource = true
}



task copyWebsite(type: Copy){
	from('src/main/website/') {
		include '**/*.html'
		filter(ReplaceTokens, tokens: [version : project.version, date : project.dateISO])
	}
	from('src/main/website/') {
		exclude '**/*.html'
	}
	into 'build/website/'
}

task copyJavadoc(type: Copy, dependsOn: 'alldocs'){
	from new File(project.buildDir, 'docs/javadoc')
	into 'build/website/javadoc/'+version
}

task website(dependsOn: [copyWebsite, copyJavadoc]) {
	description = 'build the website to deploy it when releasing'
	group = 'distribution'
}

