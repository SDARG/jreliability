plugins {
	id "com.github.hierynomus.license" version "0.14.0"
}
apply plugin: 'java'
apply plugin: 'base'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'jacoco'


/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = {
	->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'describe', '--tags'
		standardOutput = stdout
		ignoreExitValue true
	}
	version=stdout.toString().trim()
	if (version.indexOf('-') >= 0 || version.isEmpty())
		version += '-SNAPSHOT'
	return version
}
version=getVersionName()


ext {
	dateISO = new Date().format("yyyy-MM-dd")
}

mainClassName = 'org.jreliability.tester.ReliabilityTester'
group = 'org.jreliability'

repositories {
    mavenCentral()
}

dependencies {
	compile group: 'net.sourceforge.collections', name: 'collections-generic', version: '4.01'
	compile group: 'de.fosd.typechef', name: 'javabdd_repackaged', version: '1.0b2'
	compile group: 'org.bitbucket.vahidi', name: 'jdd', version: '108'
	compile files('lib/ptolemyplot-5.7.jar')
    
	testCompile 'junit:junit:4.12'
}

jar {
	manifest {
		attributes 'Main-Class': mainClassName
	}
}

/* for now ignore all javadoc errors in case of Java 8 */
if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}

license {
	include "**/*.java"
    header rootProject.file('utils/licenseHeader')
    headerDefinitions {
        custom_definition {
          firstLine = "/*******************************************************************************"
          endLine   = " *******************************************************************************/"
          beforeEachLine = " * "
          firstLineDetectionPattern = "/*"
          lastLineDetectionPattern  = " *"
          allowBlankLines = false
          isMultiline = true
        }
    }
    mapping {
    	java='custom_definition'
    }
    strictCheck true
}

jacocoTestCoverageVerification {
	dependsOn check
}

jacocoTestReport {
	dependsOn jacocoTestCoverageVerification

	reports {
		html.enabled true
		html.destination(file("${buildDir}/reports/jacoco"))
		xml.enabled = true
		xml.destination(file("${buildDir}/reports/jacoco/report.xml"))
		csv.enabled = false
	}
	
	onlyIf = {
		true
	}

    afterEvaluate {
    	getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'org/jreliability/gui/**',
				'org/jreliability/tutorial/**',
				'org/jreliability/tester/**'
				])
		})
    }
}

// maven central artifacts
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

